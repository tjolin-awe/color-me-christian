require('../components/BitmapDataFloodFill');
require('../components/Blob');
require('../components/CanvasToBlob');
require('../components/FileSaver');

class GameState {
    constructor() {
         //  The fill color comparison tolerance.
    //  Between 0 (no comparison at all during fill) and 255.
    //  Realistically you wouldn't usually put this larger than 128.
    this.tolerance = 50;

    this.thumbnails = null;

    this.key = '';

    this.bmd = null;
    this.bmdContainer = null;

    this.color = null;

    this.saveIcon = null;
    this.printIcon = null;

    this.swatch = null;
    this.selectedColor = null;
    this.swatchColorWidth = 16;
    this.swatchColorHeight = 30;
}
    preload() {

        //  First we load in the extra libs this game needs, there are 4 in total.
        //  If you've got your own build process, i.e. a Grunt or Gulp script, that
        //  packages your games together, then I would suggest rolling these 4 files into
        //  that instead, rather than loading them at run-time like here.

      

        //  Load in the assets. There is a color swatch, some icons and a paper texture.
        //  This is all just the template UI. The pictures and thumbnails are the things
        //  that are actually colored in.

        this.load.path = 'assets/images/';

        this.load.images(['swatch', 'selected', 'paper', 'print', 'save']);

        this.load.path = 'assets/images/pictures/';

        this.load.image('picture26', '26.png');
        

    }

    create() {

        this.stage.backgroundColor = '#fff';

        
        



        //  Textured paper background
        this.paper = this.add.sprite(0, 0, 'paper');
        

     
        this.start();

    }

    
  

   

  

    /**
     * This is the meat of the set-up, called when a thumbnail is picked.
     * It creates the BitmapData that will be filled, and places the rest of the game
     * UI into the scene (the icons and so on). See the comments within this function
     * for more details.
     */
    start() {

        //  The BitmapData on which the fill takes place
        this.bmd = this.add.bitmapData();

        this.key =  `picture${this.game.currentPicture}`;


        this.bmd.fill(255,255,255,255);
        //  Load the black and white outline picture into it.
        this.bmd.load(this.key);

        //  And add it to the world, so it becomes visible.
        this.bmdContainer = this.bmd.addToWorld();

        this.paper.width = 1280;
        this.paper.height = 720;

        //  Enable input for this sprite, so we can tell when it's clicked.
        this.bmdContainer.inputEnabled = true;
        
        this.bmdContainer.events.onInputDown.add(this.fill, this);

        //  This just centers it in the bottom-middle of the screen.
        this.bmdContainer.centerX = this.world.centerX;
        this.bmdContainer.bottom = this.game.height;

        //  This applies a small alpha to the image, allowing you to see
        //  the paper texture through it. You can remove this depending
        //  on what your requirements are.
        this.bmdContainer.alpha = 0.7;

        //  A copy of the image to be filled, placed over the top of the canvas
        //  This keeps the outline fresh, no matter how much filling takes place
        //  It could also contain a watermark or similar.
        var overlay = this.add.sprite(0, 0, this.key);
        overlay.x = this.bmdContainer.x;
        overlay.y = this.bmdContainer.y;
        overlay.alpha = this.bmdContainer.alpha;

        //  The save icon
        this.saveIcon = this.add.sprite(8, 456, 'save');
        this.saveIcon.inputEnabled = true;
        this.saveIcon.input.useHandCursor = true;
        this.saveIcon.events.onInputUp.add(this.save, this);

        //  The print icon
        this.printIcon = this.add.sprite(8, 528, 'print');
        this.printIcon.inputEnabled = true;
        this.printIcon.input.useHandCursor = true;
        this.printIcon.events.onInputUp.add(this.print, this);

        //  The palette swatch
        //  This is just a PNG we created in PhotoShop, that detects clicks on it.
        //  We then get the pixel color value from the swatch click, and use that
        //  as the new fill color. You could replace this technique with anything
        //  you require, or replace this swatch image. All that matters is that
        //  the fill color is loaded somehow.
        this.swatch = this.add.bitmapData();
        this.swatch.load('swatch');

        var swatchContainer = this.swatch.addToWorld();

        swatchContainer.inputEnabled = true;

        swatchContainer.events.onInputDown.add(this.pickColor, this);

        //  A little sprite marker to show which color is currently selected
        //  in our swatch.
        this.selectedColor = this.add.sprite(0, 0, 'selected');

    
        this.values = [4287993237,4288782753,4289506476,4290230199,4285439174,4283595942,4290878197,4294770943,4294901989,4294901961,4294901931,4294901903,4294901874,4294901845,4294901816,4294901785,4294901760,4294901760,4294914560,4294924288,4294933248,4294941952,4294950400,4294958848,4294834944,4293132032,4291165952,4289265408,4287299328,4285136640,4282973952,4280090368,4278255360,4278255360,4278255360,4278255403,4278255441,4278255474,4278255507,4278255539,4278255570,4278255601,4278252031,4278243583,4278235391,4278227199,4278218751,4278210303,4278201599,4278191103];
        
        /*let array_string = '['
        for (var i =0; i < this.swatch.width; i+=this.swatchColorWidth) {
            var color = this.swatch.getPixel32(i  + (this.swatchColorWidth / 2), this.swatchColorHeight / 2);
            array_string += color.toString() + ',';
            this.values.push(color);
            
      }
      array_string += ']';
      console.log(array_string);
      alert('hold up');
        console.log(this.values);
            //  Pick a default color*/
            this.pickColor(null, { x: 360, y: 0 });

       
    }

    /**
     * When the mouse is pressed down on the color swatch Sprite, this function
     * is called. All it does is get the pixel color value from the underlying
     * BitmapData, and set that into the `this.color` property. Finally the
     * swatch selector sprite is moved.
     */
    pickColor(sprite, pointer) {

        if (pointer.y <= 60)
        {
            var x = pointer.x;
            var y = pointer.y;

            //  Get the color from the swatch
            var pixel = this.swatch.getPixel32(x, y);

           // console.log(pixel);

        //   pixel = 4287993237;

            pixel = this.values[this.math.snapToFloor(x,this.swatchColorWidth) / this.swatchColorWidth];
            
        
            console.log(pixel);
            //  Use this function to normalize between big and little endian
            this.color = Phaser.Color.unpackPixel(pixel);

            
            //  And update the swatch color selection marker
            this.selectedColor.x = this.math.snapToFloor(x, this.swatchColorWidth);

            if (y < 30)
            {
                this.selectedColor.y = 0;
            }
            else
            {
                this.selectedColor.y = 30;
            }
        }

    }

    /**
     * Called when the picture is clicked.
     * 
     * Simple calculates the x and y value of the click, and passes that along with the
     * currently selected color to the BitmapData.floodFill routine.
     *
     * After filling the 'outline' is re-applied, so it never gets destroyed by the fill
     * process. If you are using a tolerance of 0 then this doesn't need to happen, we
     * only do it because our outline is aliased slightly.
     */
    fill(sprite, pointer) {

        if (pointer.y < 64)
        {
            return;
        }

        console.log(this.color);

        this.bmd.floodFill(
            pointer.x - this.bmdContainer.x,
            pointer.y - this.bmdContainer.y,
            this.color.r,
            this.color.g,
            this.color.b,
            this.color.a,
            this.tolerance);

        //  After filling, we'll re-apply the outline, so it never gets 'destroyed' by the fill
        this.bmd.copy(this.key);

        //  And update the pixel data, ready for the next fill
        this.bmd.update();

    }

    /**
     * Called when the user clicks the Print icon.
     *
     * Opens a printer dialog with the image on.
     */
    print() {

        //  You can add whatever HTML you need here, such as a logo, or copyright text,
        //  and it will be printed along with the image.

        var win = window.open();
        win.document.write("<br><img src='" + this.bmd.canvas.toDataURL() + "'/>");
        win.print();
        win.location.reload();

    }

    /**
     * Called when the user clicks the Save icon.
     *
     * Saves the colored-in image, without the paper texture. If you want to
     * include the paper texture, or maybe add in your own watermark, then you
     * could create a temporary BitmapData and draw the various elements to it,
     * then use that in the `toBlob` call below instead.
     *
     * Note that this operation is browser / device specific, i.e. it won't work
     * on iOS, but does work on desktop browsers.
     */
    save() {

        var _this = this;

        this.bmd.canvas.toBlob(function(blob) {
            saveAs(blob, _this.key + ".png");
        });

    }

}
module.exports = {GameState};
